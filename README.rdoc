== TODO

1. DONE: Paginate tasks and sort them by priority in user tasks page.

2. DONE: Add tooltips that explain tags (use tag.description) when the mouse hovers over

4. FIXED: jquery does not work (pressing on buttons that create empty pdgs) until page is reloaded (Ctrl+R). -- Answer: this behaviour was due to turbolinks. I have switched it off, however, there are ways to fix it using turbolinks as well.

5. FIXED. BUG: in paradigms_controller#save_paradigms. Scenario:
  start creating jj-type paradigm for the word 'success'
  press Word to copy words to all slots
  press (-) to remove JJR and JJT
  press SAVE.
  => error concerning nil.paradigm=

6. BUG: scenario
  start creating a new paradigm
  press a button to open an empty paradigm, leave it empty
  press a button to open a new empty paradigm, fill it in, press SAVE
  => two instances of the paradigm are shown
  !!! somehow remove the empty paradigm. or add a button to close it (DELETE with a different logic). or fix page_section_id

7. TODO: check if the following scenario works:
  go to #new
  create a nn paradigm. do not save
  create a vb paradigm. save.
  save nn paradigm

8. BUG: creating a paradigm of type Other destroys one of the other paradigm. scenario:
	* create a JJ paradigm for loose. save
	* create a VB paradigm for loose. save
    * create an Other paradigm for loose. save
    * see loose_JJ from the JJ-paradigm being deleted, while the rest of the paradigm persists!

== TODO for creating/editing paradigms

1. DONE: On paradigms#new, do not show *all* empty paradigms. Instead, add buttons such that pressing a button should open an empty paradigm.
   * reimplement using ajax
   * how to ensure the paradigms added to the page have a unique div#id?
   * fix new_paradigm_of_type.js to reuse existing div or create iff it does not yet exist
   * in paradigms_controller#create retrieve the ID of the recently saved paradigm
   * TODO: add tooltips to the pdg creation buttons, ensure the tooltip is positioned nicely

2. DONE: In paradigms#new, prepopulate paradigms when possible if there is info in DB for some word forms (e.g., the word was already processed in the past and has a paradigm or several paradigms).

3. DONE: deleting an unsaved paradigm
   * button DISMISS instead of DELETE
   * the DISMISS button removes the relevant page section by its page_section_id. no server side action involved.

4. In paradigms#new, allow editing/deleting individual paradigms.
   * see bug#5 (deleting an unsaved paradigm) -- not reproducible
   * check other scenarios

5. In paradigms#edit, do not save duplicate word+tag pairs in the same paradigm.

6. How to create more that one paradigm with the same noun (Band: BÃ¤nder/Bande)? -- this stopped (?) working when pdg creation buttons were reimplemented using ajax

7. DONE: Implement navigation through the words of the current task in a side pane
  * show the current task content in #new
  * highlight the current word
  * update changed word dynamically
  * use bullets of different colors to show whether the paradigm has comments or has review status
  * add the side pane to the #edit view
  * TODO: @show_link_to_self gets lost after deleting of a paradigm (history is lost that we come either from #new or #edit). Use sessions for storing its value?

8. Refactoring: use sessions for passing around @current_task and @current_word rather than carry it through links?

9. Is there any sense if using word.id in view? It make retrieving word in paradigms_controller more cumbersome
    and seems of no use (words are often searched by word.text)

11. when a new empty pdg stub is opened, move cursor (set focus) to the closest empty input element.
   * in Other paradigm, the focus should be in TAG field
   * in non-other paradigms, the focus should come to the WORD field

12. paradigms#edit edits only one (selected) paradigm.
   * allow renaming (NP->NN type paradigm)?
   * allow undeleting? at least just after it was deleted on paradigms#edit
   * styling: the form that was changed should be highlighted to show a change was made. same, the save button should be highlighted to show the paradigm needs to be saved.
   * styling: a word that was originally in db should be highlighetd to distinguish it from the word newly added by some user when creating a paradigm.
   * refactor: get rid of local variables 'paradigm' and 'current_word' in paradigms/edit view
   * refactor: rename _paradigm_for_form.html.haml --> paradigm_form.html.haml
   * refactor: in paradigm_for_form.html.haml get rid of table.buttons, moving its content into table.paradigm

13. DONE: pass word_id to paradigms#edit, so that click_to_copy works

14. DONE: Deleting the whole paradigm. Ensure that the original word is never deleted, but it is relinked to an added homonym if one is available. (read more in Word#suicide)

15. DONE: in paradigms#edit allow adding new slots (tag+word pairs). allows adding multiple forms with the same tag (NNS: mosquitos/mosquitoes)
  * add a button
  * controller: ensure updated pdg is saved correctly, with no duplicates.

16. DONE: ensure status and comment fields are updated correctly and their value is show correctly in the view. -- Done in #edit/#update

17. DONE: in paradigms#edit allow deleting a single word+tag pair
  * add buttons: pressing the button with (-) marks the row (word+tag) for deletion. pressing SAVE afterwards makes the changes persistent.
  * implement the logic

18. DONE: in paradigms#edit, allow changing word text and word tag
  * changing word text
  * changing the word tag

19. DONE: when deleting the whole paradigm, disable the DELETE and SAVE buttons after the first use because they should not work when clicked again. Alternatively, allow undeleting.

20. BUG? Why paradigm_type_id is used in the forms if it should be rather paradigm_id?

21. Investigate when model.save return false and reconsider correctness of paradigms_controller#save_paradigms

22. DONE: in pardigms#edit, use ajax for SAVE button. Stay on the #edit page and replace paradigm with the newer (updated) version

23. DONE: allow adding to a paradigm tags that are originally not in the paradigm. Show such tags in #edit
  * TODO: Paradigm#tags now returns an array, but should (?) rather return a Relation

24. DONE: highlight changes that have not yet been saved 
  * the word+tag inputs that have changed
  * newly created slots should always be highlighted until saved
  * highlight if the comment has changed
  * highlight if the checked values of the radio box has changed
  * TODO: styling: the user adds a new pdg slot (assiged: .changed) and then presses (-) to delete it (assigned: .deleted). How to combine .changed and .deleted? Maybe just hide the slot, pretend it was not created?

25. DONE: fixed bug: click_to_copy should fill in empty elements only, it should not overwrite existing words

26. DONE: When creating a paradigm of type Other, the input box for Word should be prepopulated with the current word. Focus should be set to the tag.

27. DONE: on #new, when multiple paradigms are shown and DELETE is pressed, all paradigms are greyed out. Only the current one should be greyed. However, the deletion works correctly: only one paradigm is deleted.

28. DONE. fix BUG: creating paradigms of type Other behaves weirdly: dispite the tag NOTAG is replaced and non-NOTAG is saved (?maybe) correctly, NOTAG shows up again in #edit

29. How to add an absolutely new word and a paradigm? How to assign a task to it? Allow empty current_word in paradigms#new?
	* BUG: Now opening paradigms/new w/o word_id leads to a crash

30. When clicking on a particular tag in the sidepane, open paradigm in #edit and highlight the tag in the paradigm that was clicked.

== TODO for retrieving paradigms

1. DONE: Possibility to get paradigms in text format using a console command
   * curl http://localhost:3000/paradigms/peek   -- get paradigms
   * curl http://localhost:3000/paradigms/dump   -- get paradigms and mark them as dumped

2. DONE: in paradigms#{peek,dump}, allow filtering
   * get only paradigms with status=ready or status=review, with different dumped value.
   * can filtering be accomplished using url format like this: paradigms/dump/all or paradigms/dump/ready -- yes. also works with urls in conventional form: paradigms/dump?status=ready
   * what should be the default? dumping only ready paradigms? or dumping all paradigms -- dumping all not dumped paradigms, regardless of the ready/review status

3. DONE: in paradigms#dump, mark paradigms that have already been dumped
   * set dumped=true
   * set dumped_at to the time when dumping occured

4. DONE: paradigms that have already been dumped should be visibly different from other paradigms.
   * greyed out in #edit
   * greyed out background in tasks
   * TODO: should such paradigms be editable?

5. Now dumping paradigms does not require authentication. Implement one for it? consider Basic HTTP Authentication. Or switch off authenticity token for some actions
  * http://stackoverflow.com/questions/8943861/how-can-i-upload-a-file-to-my-ruby-on-rails-app-using-curl-cli

6. when showing individual words (with tags), how to treat comments, info on typo (see other fields of Word)? Should typos be filtered out somehow in dumping or leave it to postprocessing?

7. Allow #peeking and #dumping individual/selected paradigms. I dont know when it could be necessary.

== TODO for paradigms

1. find/show all paradigms with unfilled slots, having comments and specific status (Ready, Review)
   those that would be peeked or dumped

== TODO for loading initial data (users, tagset, paradigm types)

1. Allow adding tags via web interface

2. DONE: Allow adding tags in bulk via console API and seeds
   * db/seeds/tagset_eng.txt
   * curl -F "tags[file]=@db/seeds/tagset_eng.txt" http://server:3000/tags/upload
   * seed.rb calls the same procedure for parsing the file
   * add a description to help page

3. Allow editing tags via web interface?

4. Allow adding new paradigm types via web interface. This would be very useful
   * add validations of tag correctness: via ajax or on the client side?

5. DONE: Allow adding new paradigm types via console api and seeds
   * db/seeds/pdg_types_eng.txt
   * paradigm_types#upload
   * reuse saving method in db/seeds.rb

6. DONE: (refactoring) move xxx_controller.add_file_data to corresponding models!
   * tags_controller.rb -> tag.rb
   * words_controller.rb -> word.rb
   * paradigm_types_controller.rb -> paradigm_type.rb
   * users_controller.rb -> user.rb

7. in Model#add_file_data access DB errors in <object>.errors.full_messages and display them in the generated report.

== TODO for user input validation

1. do not allow sending if the form contains NOTAG or empty tag???

2. check that all tags are valid -- use Ajax or client side JS?

== TODO for tasks

1. DONE: Users should be able of dropping the tasks. Dropped tasks are returned to the common task pull. Implement using ajax.

2. DONE: Taking over tasks: reimplement using ajax.

3. DONE: in tasks#index, once a task has been taken, the table of tasks should be updated to contain the correct number of items. -- fixed by rerendering the whole page via take.js.haml

4. FIXED: pagination sucks in the following scenario: user drops a (number of) task(s), pagination does not update the number of displayed tasks (until page is reloaded); when switching to a different page, some tasks are skipped, because they are now seen as belonging to the previous page
  * http://stackoverflow.com/questions/9550605/rails-render-pages-of-will-paginate-through-ajax-jquery
  * fixed by re-rendering the the relevant part of the page via tasks/drop.js.haml

5. refactor so as to get rid of duplication in users_controller#show and tasks_controller#drop

6. assign task statuses, more particularly, READY, and hide READY tasks by default

7. sort tasks by modification time (allows finding most recently done tasks or tasks in progress)

8. DONE: api for uploading new words to the server
  * http://www.tutorialspoint.com/ruby-on-rails/rails-file-uploading.htm
  * priority can be specified in the file in the 2nd field. if absent, the default is assumed
  * special keyword `priority=NUM` is recognized in the file that specifies the default priority for the words for which it is not given explicitly in the 2nd field
  * special keyword `tasksize=NUM` is recognized that allows specifying how many individual words will be added to a single task.
  * TODO: allow specifying grouping into tasks?
  * TODO: allow specifying assignee?

9. when new words are added to the system, tasks may appear that contain a lower than necessary number of words. Should it be fixed somehow? Maybe, if such task(s) have not yet been taken or started, they can be complemented. Completed tasks should never be extended with new words: assume a scenario: old finished tasks had 10 words, newer tasks have been uploaded with a requested tasksize=20, old completed tasks should not be added 10 more words.


== TODO for words

1. Find a word or all words matching given regexp pattern
   * allow manipulating the word(s) found

Why: suppose the user added a word when creating a paradigm. Now there is no chance to seek/change that word unless by finding it through the paradigm.

2. How to add (in bulk) new words/tasks through web interface?

3. DONE: allow marking a word as a typo and allow adding the correct variant
    * what about having it as a paradigm of type Typo that opens with two positions
	* output it in the dump

4. find words from other tasks that have been touched when editing another word. for example, when editing 'loose' we have added a looser_JJR. find other occurrences of 'looser' and complement this word with other paradigms.

== TODO for conversions

a new model Conversion serves to convert given word with the given tag to the given tags

it runs syn_ldb as a pipe. How to point it to a particular prosao version?

new controls into paradigm#edit for launching conversion procedure

when insering words into the form, looks like it is easier to regenerate the form (this is also useful because conversions can produce multiple forms
for which no input box is available in the initial version of the form)

test it using FSE to be aware of encoding issues	

== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

== TODO

1. DONE: Paginate tasks and sort them by priority in user tasks page.

2. DONE: Add tooltips that explain tags (use tag.description) when the mouse hovers over

4. FIXED: jquery does not work (pressing on buttons that create empty pdgs) until page is reloaded (Ctrl+R). -- Answer: this behaviour was due to turbolinks. I have switched it off, however, there are ways to fix it using turbolinks as well.

5. BUG: in paradigms_controller#save_paradigms. Scenario:
  start creating jj-type paradigm for the word 'success'
  press Word to copy words to all slots
  press (-) to remove JJR and JJT
  press SAVE.
  => error concerning nil.paradigm=
  !!! how to fix: is the underlaying word does not exist, pressing (-) should simple clear the textbox

6. BUG: scenario
  start creating a new paradigm
  press a button to open an empty paradigm, leave it empty
  press a button to open a new empty paradigm, fill it in, press SAVE
  => two instances of the paradigm are shown
  !!! somehow remove the empty paradigm. or add a button to close it (DELETE with a different logic). or fix page_section_id

7. TODO: check if the following scenario works:
  go to #new
  create a nn paradigm. do not save
  create a vb paradigm. save.
  save nn paradigm


== TODO for creating/editing paradigms

1. INPROGRESS: On paradigms#new, do not show *all* empty paradigms. Instead, add buttons such that pressing a button should open an empty paradigm.
   * DONE: reimplement using ajax
   * DONE: how to ensure the paradigms added to the page have a unique div#id?
   * DONE: fix new_paradigm_of_type.js to reuse existing div or create iff it does not yet exist
   * DONE: in paradigms_controller#create retrieve the ID of the recently saved paradigm (now hardcoded fake value)
   * ensure editing/deleting is also possible
   * add tooltips to the pdg creation buttons, ensure the tooltip is positioned nicely

2. [...] Free form for inputting word/tag pairs that do not come in paradigms. Ensure it is saved with tag!
   [+] in paradigms_controller#{new,create}
   [...] in paradigms_controller#{edit,update}

3. In paradigms#new, prepopulate paradigms when possible if there is info in DB for some word forms.

4. How to create more that one paradigm with the same noun (Band: BÃ¤nder/Bande)? -- this stopped (?) working when pdg creation buttons were reimplemented using ajax

5. How to add multiple forms with the same tag to the paradigm (mosquitos and mosquitoes) -- Allow adding new tag+word slots

6. Possibility to extend a paradigm with other tags (like adding Other into a paradigm)
   * JJing can have an RB
   * ensure these extra tags are shown in #edit

7. Ensure that the tag that can be both in a paradigm or per se is handled correctly. Does it lead to word+tag duplicates in DB that differ in paradigm_id? 
   * RB

8. Once newly filled pdg was submitted, switch to the next word in the current task.

9. Is there any sense if using word.id in view? It make retrieving word in paradigms_controller more cumbersome
    and seems of no use (words are often searched by word.text)

11. [+] when a new empty pdg stub is opened, move cursor (set focus) to the closest empty input element.

12. INPROGRESS: paradigms#edit edits only one (selected) paradigm.
   * when saved, where does it redirect? -- should probably remain on the same page (similarly as DELETE button). use ajax? disable the button until a change is made to the paradigm.
   * allow renaming?
   * allow undeleting? at least just after it was deleted on paradigms#edit
   * styling: the form that was changed should be highlighted to show a change was made. same, the save button should be highlighted to show the paradigm needs to be saved.
   * styling: a word that was originally in db should be highlighetd to distinguish it from the word newly added by some user when creating a paradigm.
   * refactor: get rid of local variables 'paradigm' and 'current_word' in paradigms/edit view
   * refactor: rename _paradigm_for_form.html.haml --> paradigm_form.html.haml
   * refactor: in paradigm_for_form.html.haml get rid of table.buttons, moving its content into table.paradigm

13. DONE: pass word_id to paradigms#edit, so that click_to_copy works

14. DONE: Deleting the whole paradigm. Ensure that the original word is never deleted, but it is relinked to an added homonym if one is available. (read more in Word#suicide)

15. DONE: in paradigms#edit allow adding new slots (tag+word pairs)
  * add a button
  * controller: ensure updated pdg is saved correctly, with no duplicates.

16. DONE: ensure status and comment fields are updated correctly and their value is show correctly in the view. -- Done in #edit/#update

17. DONE: in paradigms#edit allow deleting a single word+tag pair
  * add buttons: pressing the button with (-) marks the row (word+tag) for deletion. pressing SAVE afterwards makes the changes persistent.
  * implement the logic

18. DONE: in paradigms#edit, allow changing word text and word tag
  * changing word text
  * changing the word tag

19. DONE: when deleting the whole paradigm, disable the DELETE and SAVE buttons after the first use because they should not work when clicked again. Alternatively, allow undeleting.

20. BUG? Why paradigm_type_id is used in the forms if it should be rather paradigm_id?

21. Investigate when model.save return false and reconsider correctness of paradigms_controller#save_paradigms

22. DONE: in pardigms#edit, use ajax for SAVE button. Stay on the #edit page and replace paradigm with the newer (updated) version

23. DONE: allow adding to a paradigm tags that are originally not in the paradigm. Show such tags in #edit
  * TODO: Paradigm#tags now returns an array, but should (?) rather return a Relation

24. DONE: highlight changes that have not yet been saved 
  * the word+tag inputs that have changed
  * newly created slots should always be highlighted until saved
  * highlight if the comment has changed
  * highlight if the checked values of the radio box has changed
  * TODO: styling: the user adds a new pdg slot (assiged: .changed) and then presses (-) to delete it (assigned: .deleted). How to combine .changed and .deleted? Maybe just hide the slot, pretend it was not created?

25. BUG: click_to_copy should fill in empty elements only, it should not overwrite existing words

26. DONE: When creating a paradigm of type Other, the input box for Word should be prepopulated with the current word. Focus should be set to the tag.

27. DONE: on #new, when multiple paradigms are shown and DELETE is pressed, all paradigms are greyed out. Only the current one should be greyed. However, the deletion works correctly: only one paradigm is deleted.

28. DONE. fix BUG: creating paradigms of type Other behaves weirdly: dispite the tag NOTAG is replaced and non-NOTAG is saved (?maybe) correctly, NOTAG shows up again in #edit

== TODO for paradigms

1. Dump database

2. find all paradigms with unfilled slots, having comments and Review status

== TODO for user input validation

1. do not allow sending if the form contains NOTAG or empty tag???

2. check that all tags are valid

== TODO for tasks

1. DONE: Users should be able of dropping the tasks. Dropped tasks are returned to the common task pull. Implement using ajax.

2. DONE: Taking over tasks: reimplement using ajax.

3. DONE: in tasks#index, once a task has been taken, the table of tasks should be updated to contain the correct number of items. -- fixed by rerendering the whole page via take.js.haml

4. FIXED: pagination sucks in the following scenario: user drops a (number of) task(s), pagination does not update the number of displayed tasks (until page is reloaded); when switching to a different page, some tasks are skipped, because they are now seen as belonging to the previous page
  * http://stackoverflow.com/questions/9550605/rails-render-pages-of-will-paginate-through-ajax-jquery
  * fixed by re-rendering the the relevant part of the page via tasks/drop.js.haml

5. refactor so as to get rid of duplication in users_controller#show and tasks_controller#drop

== TODO for words

1. Find a word or all words matching given regexp pattern
   * allow manipulating the word(s) found

Why: suppose the user added a word when creating a paradigm. Now there is no chance to seek/change that word unless by finding it through the paradigm.

== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

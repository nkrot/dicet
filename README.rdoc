
== TODO for creating/editing paradigms

2. DONE: Add tooltips that explain tags (use tag.description) when the mouse hovers over

1. DONE: On paradigms#new, do not show *all* empty paradigms. Instead, add buttons such that pressing a button should open an empty paradigm.
   * reimplement using ajax
   * how to ensure the paradigms added to the page have a unique div#id?
   * fix new_paradigm_of_type.js to reuse existing div or create iff it does not yet exist
   * in paradigms_controller#create retrieve the ID of the recently saved paradigm
   * TODO: add tooltips to the pdg creation buttons, ensure the tooltip is positioned nicely

2. DONE: In paradigms#new, prepopulate paradigms when possible if there is info in DB for some word forms (e.g., the word was already processed in the past and has a paradigm or several paradigms).

3. DONE: deleting an unsaved paradigm
   * button DISMISS instead of DELETE
   * the DISMISS button removes the relevant page section by its page_section_id. no server side action involved.

4. In paradigms#new, allow editing/deleting individual paradigms.
   * see bug#5 (deleting an unsaved paradigm) -- not reproducible
   * check other scenarios

5. In paradigms#edit, do not save duplicate word+tag pairs in the same paradigm. This may happen of the form actually contained literal duplicates tag+word

6. How to create more that one paradigm with the same noun (Band: BÃ¤nder/Bande)? -- this stopped (?) working when pdg creation buttons were reimplemented using ajax

8. Refactoring: use sessions for passing around @current_task and @current_word rather than carry it through links?

9. Is there any sense if using word.id in view? It make retrieving word in paradigms_controller more cumbersome
    and seems of no use (words are often searched by word.text)

11. when a new empty pdg stub is opened, move cursor (set focus) to the closest empty input element.
   * in Other paradigm, the focus should be in TAG field
   * in non-other paradigms, the focus should come to the WORD field

12. paradigms#edit edits only one (selected) paradigm.
   * allow renaming (NP->NN type paradigm)?
   * allow undeleting? at least just after it was deleted on paradigms#edit
   * styling: the form that was changed should be highlighted to show a change was made. same, the save button should be highlighted to show the paradigm needs to be saved.
   * styling: a word that was originally in db should be highlighetd to distinguish it from the word newly added by some user when creating a paradigm.
   * refactor: get rid of local variables 'paradigm' and 'current_word' in paradigms/edit view
   * refactor: rename _paradigm_for_form.html.haml --> paradigm_form.html.haml
   * refactor: in paradigm_for_form.html.haml get rid of table.buttons, moving its content into table.paradigm

13. DONE: pass word_id to paradigms#edit, so that click_to_copy works

14. DONE: Deleting the whole paradigm. Ensure that the original word is never deleted, but it is relinked to an added homonym if one is available. (read more in Word#suicide)

15. DONE: in paradigms#edit allow adding new slots (tag+word pairs). allows adding multiple forms with the same tag (NNS: mosquitos/mosquitoes)
  * add a button
  * controller: ensure updated pdg is saved correctly, with no duplicates.

16. DONE: ensure status and comment fields are updated correctly and their value is show correctly in the view. -- Done in #edit/#update

17. DONE: in paradigms#edit allow deleting a single word+tag pair
  * add buttons: pressing the button with (-) marks the row (word+tag) for deletion. pressing SAVE afterwards makes the changes persistent.
  * implement the logic

18. DONE: in paradigms#edit, allow changing word text and word tag
  * changing word text
  * changing the word tag

19. DONE: when deleting the whole paradigm, disable the DELETE and SAVE buttons after the first use because they should not work when clicked again. Alternatively, allow undeleting.

20. BUG? Why paradigm_type_id is used in the forms if it should be rather paradigm_id?

21. Investigate when model.save return false and reconsider correctness of paradigms_controller#save_paradigms

22. DONE: in pardigms#edit, use ajax for SAVE button. Stay on the #edit page and replace paradigm with the newer (updated) version

23. DONE: allow adding to a paradigm tags that are originally not in the paradigm. Show such tags in #edit
  * TODO: Paradigm#tags now returns an array, but should (?) rather return a Relation

24. DONE: highlight changes that have not yet been saved 
  * the word+tag inputs that have changed
  * newly created slots should always be highlighted until saved
  * highlight if the comment has changed
  * highlight if the checked values of the radio box has changed
  * click_to_copy should trigger highlighting
  * TODO: styling: the user adds a new pdg slot (assiged: .changed) and then presses (-) to delete it (assigned: .deleted). How to combine .changed and .deleted? Maybe just hide the slot, pretend it was not created?

25. DONE: fixed bug: click_to_copy should fill in empty elements only, it should not overwrite existing words

26. DONE: When creating a paradigm of type Other, the input box for Word should be prepopulated with the current word. Focus should be set to the tag.

27. DONE: on #new, when multiple paradigms are shown and DELETE is pressed, all paradigms are greyed out. Only the current one should be greyed. However, the deletion works correctly: only one paradigm is deleted.

28. DONE. fix BUG: creating paradigms of type Other behaves weirdly: dispite the tag NOTAG is replaced and non-NOTAG is saved (?maybe) correctly, NOTAG shows up again in #edit

29. How to add an absolutely new word and a paradigm? How to assign a task to it? Allow empty current_word in paradigms#new?
	* BUG: Now opening paradigms/new w/o word_id leads to a crash

30. When clicking on a particular tag in the sidepane, open paradigm in #edit and highlight the tag in the paradigm that was clicked.

31. DONE: add navigation across word slots and tag slots using up- and down-arrows.

32. Show somehow (with highlighting or explanation) when the paradigm is a new one or an existing one is being edited. Presently the SAVE button tooltips are different, but this is to scarce, be more explicit.


== TODO for paradigms

1. find/show all paradigms with unfilled slots, having comments and specific status (Ready, Review)
   those that would be peeked or dumped

2. add description field to ParadigmType
	* add to loading procedure
	* use it in the tooltip

3. in paradigms_controller#new, there is no need to convert ParadigmType to Paradigm. the view paradigms#new can operate on ParadigmType object directly

4. delete paradigms from paradigm table if it has no words associated with it.

== TODO for words

1. Find a word or all words matching given regexp pattern
   * allow manipulating the word(s) found

Why: suppose the user added a word when creating a paradigm. Now there is no chance to seek/change that word unless by finding it through the paradigm.

2. How to add (in bulk) new words/tasks through web interface?

3. DONE: allow marking a word as a typo and allow adding the correct variant
    * what about having it as a paradigm of type Typo that opens with two positions
	* output it in the dump

4. find words from other tasks that have been touched when editing another word. for example, when editing 'loose' we have added a looser_JJR. find other occurrences of 'looser' and complement this word with other paradigms.

5. allow sorting words done by the user by the modification time
	* additionally with all added words (the whole paradigm)


== TODO for ParadigmForm

3. DONE: Implement ParadigmForm to hold both the old and the new state
   * create it from params
   * create it from Paradigm object
   * switch all views to using ParadigmForm instead of Paradigm
   * implement save_paradigm and update_paradigm using ParadigmForm#save
   * use ParadigmForm in CONVERT
   * TODO: remove original code for save_paradigm and update_paradigm

4. write tests for ParadigmForm and its components
   * spec/model/paradigm_form_slot_spec.rb
   * spec/model/paradigm_form_spec.rb
   * ParadigmForm#save

5. DONE: Ensure that ParadigmForm contains all tags that the paradigm of the given type must have plus user-added tags. And in the correct order!
   * Expected behaviour: rename a tag, press CONVERT, the original tag (that was renamed) does not appear.
   * BUG fixed: paradigm of type rb has incorrect order of tags (RBT-RBR-RB), although there ordering in paradigm_tags is correct

9. refactor paradigm_for_form view to replace @paradigm with @paradigm_form or get rid of explicitly passing @paradigm

10. BUG: scenario
	* create a paradigm, save
	* create another paradigm, save
	* delete the first paradigm
	* mark for deletion a slot in the remaining oaradigm, press SAVE
	* JS ERROR: POST http://localhost:3000/paradigms/ID 404 (Not Found). due to ActiveRecord::RecordNotFound (Couldn't find Word with id=176). The cause of this bug is that when the word with task_id is deleted, it is not deleted but relinked, but the ids that are in the form (word.id=176) is still the old one. fix ParadigmForm to detect such situation and try finding the right word.

11. check this scenario:
	* open a partial paradigm
	* change a tag of an existing form, w/o saving
	* press CONVERT
	* check if the changed tag is still there

12. DONE: BUG fixed: start creating a new paradigm
	* add an unusual tag to the paradigm
	* press CONVERT
	* the added tag is gone
	* however, if the unsual tag was the result of replacing the old tag, it is kept
	* it is the issue caused by sanitize, fixed together with bug described in 6 in this section.

6. allow showing all comments, provide links to corresponding paradigms.
   * allow filtering by user (should be the default, unless 'all' is requested)

1. do not allow sending the paradigm form if the form contains NOTAG or empty tag???

2. check that all tags in the paradigm form are valid -- use Ajax or client side JS?

== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

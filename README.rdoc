== TODO

1. DONE: Paginate tasks and sort them by priority in user tasks page.

2. DONE: Add tooltips that explain tags (use tag.description) when the mouse hovers over

4. FIXED: jquery does not work (pressing on buttons that create empty pdgs) until page is reloaded (Ctrl+R). -- Answer: this behaviour was due to turbolinks. I have switched it off, however, there are ways to fix it using turbolinks as well.

== TODO for creating/editing paradigms

1. [+] On paradigms#new, do not show *all* empty paradigms. Instead, add buttons such that pressing a button should open an empty paradigm.

2. [...] Free form for inputting word/tag pairs that do not come in paradigms. Ensure it is saved with tag!
   [+] in paradigms_controller#{new,create}
   [...] in paradigms_controller#{edit,update}

3. In paradigms#new, prepopulate paradigms when possible if there is info in DB for some word forms

4. [+] How to create more that one paradigm with the same noun (Band: BÃ¤nder/Bande)?

5. How to add multiple forms with the same tag to the paradigm (mosquitos and mosquitoes)

6. Possibility to extend a paradigm with other tags (like adding Other into a paradigm)
   * JJing can have an RB

7. Ensure that the tag that can be both in a paradigm or per se is handled correctly. Does it lead to word+tag duplicates in DB that differ in paradigm_id? 
   * RB

8. Once newly filled pdg was submitted, switch to the next word in the current task.

9. Is there any sense if using word.id in view? It make retrieving word in paradigms_controller more cumbersome
    and seems of no use (words are often searched by word.text)

11. [+] when a new empty pdg stub is opened, move cursor (set focus) to the closest empty input element.

12. paradigms#edit edits only one (selected) paradigm. 
   * allow deleting a single word/tag
   * allow renaming?
   * when saved, where does it redirect?
   * allow changing word (delete old one)
   * BUG: do not add duplicates!!!
   * allow undeleting? at least just after it was deleted on paradigms#edit
   * styling: the form that was changed should be highlighted to show a change was made. same, the save button should be highlighted to show the paradigm needs to be saved.
   * styling: a word that was originally in db should be highlighetd to distinguish it from the word newly added by some user when creating a paradigm.

13. DONE: pass word_id to paradigms#edit, so that click_to_copy works

14. DONE: Deleting the whole paradigm. Ensure that the original word is never deleted, but it is relinked to an added homonym if one is available. (read more in Word#suicide)

15. INPROGRESS: in paradigms#edit allow adding new slots
  * DONE: add a button
  * controller: ensure updated pdg is saved correctly, with no duplicates.

== TODO for user input validation

1. do not allow sending if the form contains NOTAG or empty tag???

2. check that all tags are valid

== TODO for tasks

1. DONE: Users should be able of dropping the tasks. Dropped tasks are returned to the common task pull. Implement using ajax.

2. DONE: Taking over tasks: reimplement using ajax.

3. BUG: pagination sucks in the following scenario: user drops a (number of) task(s), pagination does not update the number of displayed tasks (until page is reloaded); when switching to a different page, some tasks are skipped, because they are now seen as belonging to the previous page

== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
